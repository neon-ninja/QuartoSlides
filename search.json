[
  {
    "objectID": "ML-Recap.html#introduction-to-machine-learning-with-scikit-learn",
    "href": "ML-Recap.html#introduction-to-machine-learning-with-scikit-learn",
    "title": "ML-Carp Recap and Outlook",
    "section": "Introduction to Machine Learning with Scikit Learn",
    "text": "Introduction to Machine Learning with Scikit Learn\n\nNelis introduced us to the topic\nMike built on that\nRegression and Classification\nEnsemble methods, Clustering, Dimension reduction"
  },
  {
    "objectID": "ML-Recap.html#introduction-to-deep-learning",
    "href": "ML-Recap.html#introduction-to-deep-learning",
    "title": "ML-Carp Recap and Outlook",
    "section": "Introduction to Deep Learning",
    "text": "Introduction to Deep Learning\n\nNidhi switched from generic ML to Deep Learning (DL)\nSome aspects (there are more:)\n\nML: is non-stoachstic; similar if not the same result\nDL: non-convex and complex\nDL: only estimated/non-deterministic results/every run can differ a bit\nDL: of uses neural networks, but also DBN, VAEs, etc.\nDL: tends to use way more resources (CPU/GPU)\nML: Can still solve a lot of real-world issues using limilted resources"
  },
  {
    "objectID": "ML-Recap.html#workflows-for-heavier-computation",
    "href": "ML-Recap.html#workflows-for-heavier-computation",
    "title": "ML-Carp Recap and Outlook",
    "section": "Workflows for heavier computation",
    "text": "Workflows for heavier computation\n\nGoogle Colab vs. locally installed Jupyter Notebooks or Plain Vanilla Python\n\nDo all use Colab ‘in the real world’ all the time? No!\n\nVSCode\nPython locally installed\n\nVirtual Environment\npip install\n\nusing GPU/Nectar/…"
  },
  {
    "objectID": "ResBazPlanning.html#r",
    "href": "ResBazPlanning.html#r",
    "title": "ResBaz 2023 - Scheduling Assistance",
    "section": "R",
    "text": "R\n\nLet’s start with R.\nIt is very commonly used\nand it originated from research needs to undertake statistical analysis and to create graphics.\nNowadays, there are heaps of things that you can do with R and these are presented in the session\n“Introduction to R and R Studio”\n\nWhat you learned there will be expanded on in “Using R for statistical analysis” and even more in “Hands-on statistical analysis with R”"
  },
  {
    "objectID": "ResBazPlanning.html#python",
    "href": "ResBazPlanning.html#python",
    "title": "ResBaz 2023 - Scheduling Assistance",
    "section": "Python",
    "text": "Python\n\nAnother popular programming language in the research Community is Python.\nPython is commonly employed for all kinds of research-tasks.\nTo get an overview, we reommend attending the taster session: “How Can Python Help Your Research?”.\n\nIf you have or already had developed a taste for Python, “Introduction to the Python Programming Language” gets you started with hands-on coding in Python\n\nIf you face challenges with handling/changing/manipulating not one but hundreds or more of files, “Python for Image Manipulation and Repeatable Research Pipelines” helps you in making Python do the work so you can free up some time to focus on research"
  },
  {
    "objectID": "ResBazPlanning.html#cli",
    "href": "ResBazPlanning.html#cli",
    "title": "ResBaz 2023 - Scheduling Assistance",
    "section": "CLI",
    "text": "CLI\n\nEven though you can run many aspects of R and Python in a graphical user interface or gui, so independent of a command-line interface or CLI, many other software packages do have a cli version\nSome also refer to these as the terminal version.\n\nSometimes this might have even more functionality or\nyou can automate tedious tasks\nor its use contributes to a repeatable and hence reproduicble resareach workflow.\nThese things become more and more important."
  },
  {
    "objectID": "ResBazPlanning.html#cli2",
    "href": "ResBazPlanning.html#cli2",
    "title": "ResBaz 2023 - Scheduling Assistance",
    "section": "CLI2",
    "text": "CLI2\n\nIn the session “introduction to command line” you will be familiarized with important commands but also the related mindset\nand syntax.\n\nA fancy way os daying how you have to type things out.\nOften upper or lower case, dashes and the sequence matter.\n\nAs a next step, you can apply these skills in the session “using the command line to find replace and manipulate data”\n\nThat session title gives a lot away\nand might save you hours of work"
  },
  {
    "objectID": "Plots.html",
    "href": "Plots.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "backup \n\n\nCode\nimport plotly.express as px\nimport pandas as pd\nimport plotly.io as pio\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.cm as cm\n\n\n\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\n# pio.renderers.default = \"notebook\"\n# Read data from the CSV file\ndf = pd.read_csv('./InputDataR1.csv')\ndfR2 = pd.read_csv('./InputDataR2.csv')\ndf2 = df.drop([0, 1])\ndfR22 = dfR2.drop([0, 1])\n\noption_counts = df2['Q1'].value_counts()\noption_countsR2 = dfR22['Q1'].value_counts()\n# Create a DataFrame from the value_counts() result\n\noption_counts_df = pd.DataFrame({'Option': option_counts.index, 'R1': option_counts.values})\noption_counts_dfR2 = pd.DataFrame({'Option': option_countsR2.index, 'R2': option_countsR2.values})\noption_counts_df = option_counts_df.merge(option_counts_dfR2, on=\"Option\", how=\"outer\")\n\n# Custom colors\ncustom_colors = ['#00467F', '#009AC7', '#8D9091', '#A71930', '#7D0063', '#D2492A', '#55A51C',\n                 '#4F2D7F', '#005B82', '#00877C', '#0039A6', '#BA4482', '#006990']\n\n\ntrace1 = go.Pie(\n     values=option_counts_df.R1, \n     labels=option_counts_df.Option,\n     domain=dict(x=[0, 0.5]),\n     name=\"Run #1\",\n     hole=0.4,\n     hoverinfo=\"label+percent+name\",\n     title=\"Run#1\",\n     marker_colors=custom_colors\n)\n\n\n\ntrace2 = go.Pie(\n     values=option_counts_df.R2, \n     labels=option_counts_df.Option,\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Run #2\",\n     hole=0.4,\n     hoverinfo=\"label+percent+name\",\n     title=\"Run#2\",\n     marker_colors=custom_colors\n)\n\nlayout = go.Layout()\n#     title=\"Participants' Background\")\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\noption_countsOSR1 = df2['Q2'].value_counts()\noption_countsOSR2 = dfR22['Q2'].value_counts()\n# Create a DataFrame from the value_counts() result\n\noption_counts_df = pd.DataFrame({'Option': option_countsOSR1.index, 'R1': option_countsOSR1.values})\noption_counts_dfR2 = pd.DataFrame({'Option': option_countsOSR2.index, 'R2': option_countsOSR2.values})\noption_counts_df = option_counts_df.merge(option_counts_dfR2, on=\"Option\", how=\"outer\")\n\n# Custom colors\ncustom_colors = ['#00467F', '#009AC7', '#8D9091', '#A71930', '#7D0063', '#D2492A', '#55A51C',\n                 '#4F2D7F', '#005B82', '#00877C', '#0039A6', '#BA4482', '#006990']\n\n\ntrace1 = go.Pie(\n     values=option_counts_df.R1, \n     labels=option_counts_df.Option,\n     domain=dict(x=[0, 0.5]),\n     name=\"Run #1\",\n     hole=0.4,\n     hoverinfo=\"label+percent+name\",\n     title=\"Run#1\",\n     marker_colors=custom_colors\n)\n\n\n\ntrace2 = go.Pie(\n     values=option_counts_df.R2, \n     labels=option_counts_df.Option,\n     domain=dict(x=[0.5, 1.0]),\n     name=\"Run #2\",\n     hole=0.4,\n     hoverinfo=\"label+percent+name\",\n     title=\"Run#2\",\n     marker_colors=custom_colors\n)\n\nlayout = go.Layout()\n#     title=\"Participants' Background\")\ndata = [trace1, trace2]\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\n# List of column names you want to plot\ncolumns_to_plot = ['Q3_1', 'Q3_2', 'Q3_3', 'Q3_4', 'Q3_5', 'Q3_6']\n\n# String to be stripped from each element\nstring_to_strip = \"Please rate your level of agreement with the following statements (0 = complete disagreement, 100 = complete agreement). - \"\n\n\n\nfor column in columns_to_plot:\n    df[column] = df[column].str.replace(string_to_strip, '', case=False)  # case=False makes it case-insensitive\n\n\n# Convert the columns to float (if needed)\nfor column in columns_to_plot:\n    df2[column] = df2[column].astype(float)\n\n\n\nit_number = 0\n\n# Create a subplot for each column\nsubplots = []\nfor column in columns_to_plot:\n    median_value = df2[column].median()\n    subplot = go.Box(y=df2[column],\n                     boxpoints='all',   # can also be 'outliers', 'suspectedoutliers', or False\n                     jitter=0.3,        # add some jitter for better separation between points\n                     pointpos=-1.8,     # relative position of points with respect to the box\n                     line=dict(color=custom_colors[it_number]),  # Custom color for the box outline\n                     marker=dict(color=custom_colors[it_number]),\n                     name=df.loc[0,column]\n                     )       # set the name for the legend\n    subplots.append(subplot)\n    it_number += 1\n\n\n\n# Create a figure with subplots\nfig = go.Figure(data=subplots)\n\n# Force Scale to 0-100\nfig.update_layout(yaxis_range=[0, 100])\n\n\n# Initialize a counter variable\niteration_number = 0\n\n\nfor column in columns_to_plot:\n    median_value = df2[column].median()\n    fig.add_annotation(\n        x=iteration_number,\n        y=median_value,\n        text=f'Median: {median_value:.2f}',\n        font=dict(size=14, color=\"black\"),\n        showarrow=True,\n        arrowhead=7,\n        ax=0,\n        ay=-20)\n    # Increment the counter\n    iteration_number += 1\n\n# Customize the layout\nfig.update_layout(\n    title=\"Agreement with statements: 0 = complete disagreement, 100 = complete agreement\",\n    # xaxis_title=\"Columns\",\n    # yaxis_title=\"Values\",\n    font=dict(\n        family=\"Verdana\",\n        size=18,\n    )\n)\n\nfig.update_traces()\n# fig.update_layout(showlegend=False)\n# Remove x-axis labels and ticks\nfig.update_xaxes(\n    showticklabels=False,  # Hide tick labels\n    showline=False,        # Hide x-axis line\n    zeroline=False         # Hide zero line\n)\n\n# Position the legend under the boxplot\nfig.update_layout(\n    legend=dict(\n        x=0.5,             # Set the x-position to the center\n        y=-0.2,            # Set the y-position below the boxplot\n        xanchor='center',  # Center the legend horizontally\n        yanchor='top',     # Anchor the legend to the bottom of the plot\n        font=dict(\n            size=18         # Set the legend text size to 18\n        )\n    )\n)\n\n\n# Add a horizontal line to the boxplot\naverage_values = df2[columns_to_plot].mean()\noverall_avg = average_values.mean()\n# print(overall_avg)\n\nfig.add_shape(\n    go.layout.Shape(\n        type=\"line\",\n        x0=-1,\n        x1=len(columns_to_plot),\n        y0=overall_avg,\n        y1=overall_avg,\n        line=dict(color=\"red\", width=2),\n    )\n)\nfig.add_annotation(\n    x=len(columns_to_plot),\n    y=overall_avg,\n    text=f'Overall avg: {overall_avg:.2f}',\n    font=dict(size=14, color=\"red\"),\n    # showarrow=True,\n    # arrowhead=7,\n    ax=0,\n    ay=20\n    )\n\n\n# Show the box plots\nfig.show()"
  },
  {
    "objectID": "LaTeX101.html#visualisations-in-tikz",
    "href": "LaTeX101.html#visualisations-in-tikz",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Visualisations in TikZ",
    "text": "Visualisations in TikZ\nExample showing the power of the TikZ package"
  },
  {
    "objectID": "LaTeX101.html#visualisations-in-tikz--1",
    "href": "LaTeX101.html#visualisations-in-tikz--1",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Visualisations in TikZ -1",
    "text": "Visualisations in TikZ -1\n Source"
  },
  {
    "objectID": "LaTeX101.html#visualisations-in-tikz--2",
    "href": "LaTeX101.html#visualisations-in-tikz--2",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Visualisations in TikZ -2",
    "text": "Visualisations in TikZ -2\n Source"
  },
  {
    "objectID": "LaTeX101.html#visualisations-in-tikz--3",
    "href": "LaTeX101.html#visualisations-in-tikz--3",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Visualisations in TikZ -3",
    "text": "Visualisations in TikZ -3\n Source"
  },
  {
    "objectID": "LaTeX101.html#visualisations-in-tikz--4",
    "href": "LaTeX101.html#visualisations-in-tikz--4",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Visualisations in TikZ -4",
    "text": "Visualisations in TikZ -4\n Source"
  },
  {
    "objectID": "LaTeX101.html#easily-go-from-one-to-two-column-layouts",
    "href": "LaTeX101.html#easily-go-from-one-to-two-column-layouts",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Easily go from one to two column layouts",
    "text": "Easily go from one to two column layouts\n\n\n\\documentclass[10pt,a4paper,onesided]{article} \n\\usepackage{lipsum}\n\\begin{document}\n  \\section{My Title}\n  \\subsection{Sub-Section}\n  \\textbf{Printing 1 to 3 paragraphs}\\\\\n  \\lipsum[1-3]\n  \\subsection{Sub-Section}\n  \\lipsum[1]\n\\end{document}\nNote that: …onesided… \n\n#| \\documentclass[10pt,a4paper,twocolumn]{article} \n\\usepackage{lipsum}\n\\begin{document}\n  \\section{My Title}\n  \\subsection{Sub-Section}\n  \\textbf{Printing 1 to 3 paragraphs}\\\\\n  \\lipsum[1-3]\n  \\subsection{Sub-Section}\n  \\lipsum[1]\n\\end{document}\nNote that: …twocolumn…"
  },
  {
    "objectID": "LaTeX101.html#mathsformulae",
    "href": "LaTeX101.html#mathsformulae",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Maths/Formulae",
    "text": "Maths/Formulae"
  },
  {
    "objectID": "LaTeX101.html#external-files",
    "href": "LaTeX101.html#external-files",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "External Files",
    "text": "External Files\n\nYou (usuall) reference external files; this means you might have a ‘Images’ folder. All updates (while maintaining the file name) come into effect quickly (after recompiling); consider a version control mechanism such as GitHub to avoid data loss\nThis also works for imported data (often in the csv file format) which you can get to automatically update tables\nEven layouts can be changed\n\nWorkflow for changing things in citations (Zotero) or getting a citation from a paper (three steps and done), backed up to GitHub, don’t worry\nUpdate a picture to the latest version, keep the name, don’t worry about overwriting, because you have it on GitHub\nBecause of LaTeXIt knowing the syntax can help you with creating vis. for your PowerPoint, Slides, … Presentation\nSyntax highlighting for code\nChange a caption on several figures, update the ToC,…"
  },
  {
    "objectID": "LaTeX101.html#advantages",
    "href": "LaTeX101.html#advantages",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Advantages",
    "text": "Advantages\n\n\n\n\n\n\nNote\n\n\nThere is a trade-off between time invested upfront (learning \\(\\LaTeX\\) etc. vs. and time saved in the long-run. As many of you might work on their PhD thesises, this time balance one day before the deadline vs. some hours or days can’t be traded-off 1:1\n\n\n\n\n(good) \\(\\LaTeX\\) output looks epic (at least in most cases)\n\nit decides where pictures are placed\nmaths is neatly rendered\nhow line-breaks happen (justify text is using a dictionary for line-breaks, unlike many wysiwyg editors)\nmulti-column layouts on one page"
  },
  {
    "objectID": "LaTeX101.html#advantages---continued",
    "href": "LaTeX101.html#advantages---continued",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Advantages - continued",
    "text": "Advantages - continued\n\nit is free and not tied to any big corporation, you can often write in any text editor, browser etc.\nit is no closed source file (unlike a .docx or so) this means we can use Git(Hub) EXAMPLE and other version control systems (we can run things like a diff on it, EXAMPLE CODE GOES HERE)\n\nno proprietary software that\n\nmight disappear from the market\ncharges you an arm and a leg especially over time with a subscription model (yes, I am looking at you, Adobe)\nmeans you can keep this compeltely offline/local/no-cloud, etc. good for Ethics Approvals and sensitive data, …\n\n\nyou can mostly get outputs to several outputs with altering a few lines (vs. clicking on every slide or here and there)"
  },
  {
    "objectID": "LaTeX101.html#advantages---continued-1",
    "href": "LaTeX101.html#advantages---continued-1",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Advantages - continued",
    "text": "Advantages - continued\n\nyou can customise it heavily\nyou can have inline comments (for future you, for your supervisor, to toggle things on/off)\nIf you ingest some code, tables, data, a lot of figures ResBaz Workshop Python for image manipulation and repeatable research pipelines, you will learn to love \\(\\LaTeX\\)\nReferencing is quite easy, especially if paired with a reference manager such as Zotero, see ResBaz session Managing References With Zotero\nMaths! \\(f_{c}=z^{2}+c\\) AND Mathpix Snipping\nPlotting (again some learning curve, but no Excel to Word to something schenanigans where you might miss out the latest version of a file and try to publish something wrong)\nsame goes for citations, referencing figures, placing figures (yes, you can specify that it shall be right there where you want it, but you can also let \\(\\LaTeX\\) work it’s magic)\nPortability: LaTeX documents are portable and can be easily converted to other formats, such as PDF, HTML, or EPUB."
  },
  {
    "objectID": "LaTeX101.html#advantages---continued-2",
    "href": "LaTeX101.html#advantages---continued-2",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Advantages - continued",
    "text": "Advantages - continued\nSymbols often render very neatly, sometimes workarounds are needed\nM\\={a}ori \nFor Macrons a more advanced approach is described here, as Unicode is mostly used, you can type Māori (so on a Mac use the long-press option ā to write Māori or change the keyboard style) or copy-paste such characters."
  },
  {
    "objectID": "LaTeX101.html#disadvantages",
    "href": "LaTeX101.html#disadvantages",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Disadvantages",
    "text": "Disadvantages\n\nit takes time to learn (Overleaf and other more relevant UI etc. make it easier)\nit can be very fiddely (if you want specifics with tables, or placing images)\nthe collaboration features are quite limited out of the box, yes, a lot can be done (see Eirian), but that mostly requires you to a) bring/acquire some coding knowledge, b) invest time; here, MS Word Clearly wins\nplugins such as Grammarly don’t work ootb, for VSCode, you can integrate these as an Extension, on Overleaf there is a buggy workaround"
  },
  {
    "objectID": "LaTeX101.html#preamble",
    "href": "LaTeX101.html#preamble",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Preamble",
    "text": "Preamble\nThis is similar to programming where you start with importing relevant libraries (things others did to make your life easier) and definitions (for example, colours)\n\\documentclass[twoside,openright,a4paper]\n\n\\usepackage[usenames, dvipsnames, table]{xcolor}\n\n\\addbibresource{references.bib}\n\n\\definecolor{uoadarkblue}{RGB}{0, 70, 127}"
  },
  {
    "objectID": "LaTeX101.html#main-body",
    "href": "LaTeX101.html#main-body",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Main body",
    "text": "Main body\nYou can either - write all your document in one text file (with the file extension *.tex) - \\(\\LaTeX\\) commands usually start with the backslash character - as in all coding, it is important to close brackets that you have opened and to be quite picky with the details - \\(\\LaTeX\\) is mostely whitespace-insensitive, this means you can write your .tex document without having to worry about empty lines, etc. This also means, if you want to include empty lines, you have to enforce them - \\\\ (two backslashes) - \\newline - \\hfill \\break - see also - It is good practice not to create one huge .tex file but to use the \\include command to include chapters\n\\include{Titlepage}\n\\part{Background}\n\\include{Chapters/Intro}"
  },
  {
    "objectID": "LaTeX101.html#references-appendices-etc.",
    "href": "LaTeX101.html#references-appendices-etc.",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "References, Appendices, etc.",
    "text": "References, Appendices, etc.\n\nall of these can be ingested (reference to external files) in the preamble\nIt’s fair to consider this a strong-suit of \\(\\LaTeX\\)\ndetails exceed the scope of this introduction; more in-depth ResBaz sessions are offered (see Section 10) and you can refer to the template provided"
  },
  {
    "objectID": "LaTeX101.html#how-to-get-latex---the-core",
    "href": "LaTeX101.html#how-to-get-latex---the-core",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "How to get \\(\\LaTeX\\) - the core",
    "text": "How to get \\(\\LaTeX\\) - the core\nIdea: As software-agnostic as possible - Download a \\(\\LaTeX\\) distribution, for example MiKTeX - install pandoc - use any texteditor - Windows: - Notepad - Mac: - TextEdit - Linux: - various - Cross-Platform: - VSCode - Sublime - on the commandline: type pandoc -i ~/Desktop/myWritings.tex -o ~/Desktop/MyRenderedLaTeX.pdf - inspect your neatly renedered document"
  },
  {
    "objectID": "LaTeX101.html#how-to-get-latex---special-editors",
    "href": "LaTeX101.html#how-to-get-latex---special-editors",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "How to get \\(\\LaTeX\\) - special editors",
    "text": "How to get \\(\\LaTeX\\) - special editors\nThe idea is to have a local installation and a specialised editor - Texifier - TeXLive - TeXStudio - TeXMaker"
  },
  {
    "objectID": "LaTeX101.html#how-to-get-latex---in-the-browser",
    "href": "LaTeX101.html#how-to-get-latex---in-the-browser",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "How to get \\(\\LaTeX\\) - In the browser",
    "text": "How to get \\(\\LaTeX\\) - In the browser\n\nOverleaf is quote famous for bringing $to the masses\nA pro and con at the same time: It runs in the cloud, you don’t need to install a \\(\\LaTeX\\) distribution, special editor, etc.\nRecently, they added “Overleaf On-Premises” to circumvent privacy challenges\nthere is a free plan which might be a good fit for beginners or if it is just you wokring on a dcument\nthere are paid plans, including student plans which are currently NZD109/year\n\nThe main advantages:\n\nInvite collaborators, so work on the same document at the same time\nHave a similar tracking mechanism as MS Word’s Track Changes\nSync to Dropbox, GitHub, etc.\n\n\nUoA Bioengineering staff/students get Overleaf premium free ALTERNATVIELY: There is another ResBaz session: Stop Paying for Free Software"
  },
  {
    "objectID": "LaTeX101.html#how-to-get-latex---the-meta-version",
    "href": "LaTeX101.html#how-to-get-latex---the-meta-version",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "How to get \\(\\LaTeX\\) - The meta version",
    "text": "How to get \\(\\LaTeX\\) - The meta version\nQuarto can be considered one level above in terms of abstraction \n\n\\(\\LaTeX\\) is just one of its output, the other benefit is a direct integration with Python, R, Julia, Observable\nyou can write in markdown syntax (.md) so for example **my text** (md notation) as oppsed to \\textbf{my text}\nthe integration with code means you won’t have to copy-paste results back and forth\n\nthis point can’t be stressed enough! You are so likely to forget updating a plot\nyou also get reproducability, because it isn’t just a screen shot that is integrated into your document &lt;!– (There are approaches where you can get some (rudimentary) Python code into LaTeX, even into Overleaf, but these are mainly for handling several files (batch processing) keeping track of Python version- Coding colaborators can contribute via a Git workflow\n\nCommunicate results to non-coding collaborators using git (e.g., GitHub)\n\n\n\n\n\n\n\nOn a side-note\n\n\nThis deck of slides (based on RevealJS, it can also handle a lot of code."
  },
  {
    "objectID": "LaTeX101.html#tables",
    "href": "LaTeX101.html#tables",
    "title": "LaTeX 101 - Don’t be scared",
    "section": "Tables",
    "text": "Tables\n\n\n\nA simple table in \\(\\LaTeX\\) syntax:\n\n\\begin{table}[]\n\\caption{My Example Table}\n\\label{tab:my-table}\n\\begin{tabular}{|l|l|l|l|l|}\n\\hline\ncountry     & 1999   & 2000   &  &  \\\\ \\hline\nAfghanistan & 745    & 2666   &  &  \\\\ \\hline\nBrazil      & 37737  & 80488  &  &  \\\\ \\hline\nChina       & 212258 & 213766 &  &  \\\\ \\hline\n\\end{tabular}\n\\end{table}\n\n\nAlternatively using markdown syntax:\n\n| country     | 1999   | 2000   |   |   |\n|-------------|--------|--------|---|---|\n| Afghanistan | 745    | 2666   |   |   |\n| Brazil      | 37737  | 80488  |   |   |\n| China       | 212258 | 213766 |   |   |\n\n\n\nTo be honest:\n\nBoth are a pain to format by hand\nYou shouldn’t work with your data in these. These are for publishing only.\nSome see spreadsheet software (MSExcel, Google Sheets, etc.) just suited for data entry, Python, R, OpenRefine, etc. are better alternatives whose learning curve isn’t as steep as you might expect and relevant sessions are also provided at this year’s ResBaz (see pointers)"
  },
  {
    "objectID": "LightningTalk.html#participants-background",
    "href": "LightningTalk.html#participants-background",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "Participants’ Background",
    "text": "Participants’ Background"
  },
  {
    "objectID": "LightningTalk.html#participants-os",
    "href": "LightningTalk.html#participants-os",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "Participants’ OS",
    "text": "Participants’ OS"
  },
  {
    "objectID": "LightningTalk.html#participants-feelings-about",
    "href": "LightningTalk.html#participants-feelings-about",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "Participants’ Feelings about",
    "text": "Participants’ Feelings about"
  },
  {
    "objectID": "LightningTalk.html#metrics-1",
    "href": "LightningTalk.html#metrics-1",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "Metrics",
    "text": "Metrics\n\n\nabc\n\ndef\n\n\n::: {.fragment .fade-in} :::{.callout-note} All statements are positively phrased; overall the results confirm a poasitive appreciation. :::"
  },
  {
    "objectID": "LightningTalk.html#what-1-thing-did-you-like-and-would-want-to-see-in-future-workshops",
    "href": "LightningTalk.html#what-1-thing-did-you-like-and-would-want-to-see-in-future-workshops",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "What 1 thing did you like and would want to see in future workshops?",
    "text": "What 1 thing did you like and would want to see in future workshops?\n\n“apply these ML techniques on the different field”\n\nhard to achieve, focus on underlying theory\n\n“slower pace”\n\nremoved Python from curriculum\n\n“some research paper example?”\n\nhard\n\n“add some quick group exercise session or quiz”\n\nmore links/examples after the run\n\n“many people were online to help the students”\n\ncontinued with many helpers"
  },
  {
    "objectID": "LightningTalk.html#what-1-thing-you-do-think-we-could-do-better",
    "href": "LightningTalk.html#what-1-thing-you-do-think-we-could-do-better",
    "title": "Developing a Carpentries-style Machine Learning workshop",
    "section": "What 1 thing you do think we could do better?",
    "text": "What 1 thing you do think we could do better?\n\ntoo fast\nseparate Python\nadhering to break schedule\nComparing Run #1 and #2: What metrics and people say\n\nwhat the numbers say\n\nmore people signed up (word of mouth/positive experince being shared?)\nmore of this and that\n\nwhat the pepole say\n\ninstrcutors/organisers (for the sake of bervity no full quotes)\n\nbetter balance of topics (only ML, DL vs. having to cope with Python)\n\nparticipants\n\n…"
  }
]